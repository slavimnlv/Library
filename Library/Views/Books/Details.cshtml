@model Library.ViewModels.Books.DetailsVM

@{
    ViewData["title"] = "Book Details";
}
<div class="mt-5 mx-auto border rounded-3 d-flex flex-wrap @(Model.Reviews.Count == 0 ? "no-reviews" : "with-reviews")">
    <h2 class="details-heading mt-3 @(Model.Reviews.Count > 0 ? "ps-4" : "")">
        Book Details
    </h2>

    <div class="px-4 py-2 details">
        <div class="d-flex">
            <div class="fw-bold me-2">Title:</div>
            <div>@Model.Title</div>
        </div>

        <div class="d-flex">
            <div class="fw-bold me-2">Author:</div>
            <div>@Model.Author</div>
        </div>

        <div class="d-flex">
            <div class="fw-bold me-2">Year:</div>
            <div>@Model.Year</div>
        </div>

        <div class="d-flex">
            <div class="fw-bold me-2">Total:</div>
            <div>@Model.Count</div>
        </div>

        @if (Model.Categories != null && Model.Categories.Any())
        {
            <div class="d-flex">
                <div class="fw-bold me-3">@(@Model.Categories.Count > 1 ? "Categories:" : "Category:")</div>
                <div>
                    @string.Join(", ", Model.Categories.Select(c => c.Name))
                </div>
            </div>
        }
    </div>

    @if (Model.Reviews != null && Model.Reviews.Any())
    {
        <div class="flex-grow-1 px-4 py-2">
            <div>               
                <div class="fw-bold">Reviews:</div>

                @foreach (var review in Model.Reviews)
                {
                <div class="border rounded-3 p-2 my-2">
                    <div class="d-flex">
                        <div class="fst-italic me-2">Author: </div>
                        <div>@review.AuthorName</div>
                    </div>
                    <div class="d-flex">
                        <div class="fst-italic me-2">Score:</div>
                        <div>@review.Assessment</div>
                    </div>
                    <div class="d-flex">
                        <div class="fst-italic me-2">Comment:</div>
                        <div>@review.Comment</div>
                    </div>
                    </div>
                }
            </div>
        </div>
    }

    <div class="details-buttons-container d-flex justify-content-center pt-3 pb-4">
        <a class="btn btn-warning me-3" href="@Url.Action("Edit", "Books", new { Id = Model.BookId})">Edit</a>
        <form class="me-3" action="/Books/Delete" method="post">
            @Html.HiddenFor(m => m.BookId)
            <button type="submit" class="btn btn-danger">Delete</button>
        </form>
        @if (Model.Count > 0)
        {
            <form class="me-3" action="/Books/Borrow" method="post">
                @Html.HiddenFor(m => m.BookId)
                <button type="submit" class="btn btn-primary">Borrow</button>
            </form>
        }
        <form action="/Books/Return" method="post">
            @Html.HiddenFor(m => m.BookId)
            <button type="submit" class="btn btn-info">Return</button>
        </form>
    </div>
</div>

@{
    await Html.RenderPartialAsync("_ReviewPartial", Model.NewReview);
}

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
}
