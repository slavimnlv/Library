// <auto-generated />
using System;
using Library.Repositories;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Library.Migrations
{
    [DbContext(typeof(LibraryDbContext))]
    [Migration("20240519111241_AddCategoriesSeeder")]
    partial class AddCategoriesSeeder
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BookCategory", b =>
                {
                    b.Property<Guid>("BooksId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoriesId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("BooksId", "CategoriesId");

                    b.HasIndex("CategoriesId");

                    b.ToTable("BookCategory");
                });

            modelBuilder.Entity("Library.Entities.Book", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Books");
                });

            modelBuilder.Entity("Library.Entities.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1f6521dd-7582-4b51-93af-60e9e106a349"),
                            Name = "Science Fiction"
                        },
                        new
                        {
                            Id = new Guid("1a6766c9-5a5c-4ef8-8c39-d0100ea28bbb"),
                            Name = "Fantasy"
                        },
                        new
                        {
                            Id = new Guid("39456098-aa40-4285-800f-db1fa68f4f9e"),
                            Name = "Non-Fiction"
                        },
                        new
                        {
                            Id = new Guid("a9481404-28cd-48ba-bf85-4c36aaedc356"),
                            Name = "Mystery"
                        },
                        new
                        {
                            Id = new Guid("e9957962-4853-4504-98b0-77e10dfa71b4"),
                            Name = "Romance"
                        },
                        new
                        {
                            Id = new Guid("2d07f3fd-1265-4fa3-9d93-c701ce16bbf7"),
                            Name = "Thriller"
                        },
                        new
                        {
                            Id = new Guid("9addd4ab-0e79-4326-8ec0-0bfacaeacfcd"),
                            Name = "Historical Fiction"
                        },
                        new
                        {
                            Id = new Guid("369085a3-4397-4c18-a10f-c365c2e763b4"),
                            Name = "Biography"
                        },
                        new
                        {
                            Id = new Guid("ca11f830-5067-4cef-8a90-7936b3bcf5fb"),
                            Name = "Self - Help"
                        },
                        new
                        {
                            Id = new Guid("4af98cd0-38b3-4f95-97ae-bd479059ffb5"),
                            Name = "Young Adult"
                        },
                        new
                        {
                            Id = new Guid("e0a196d6-3c04-41af-b8d4-6b9b6e1cd203"),
                            Name = "Children's Books"
                        },
                        new
                        {
                            Id = new Guid("407fdec1-46e8-48cf-936f-e0855f063d48"),
                            Name = "Poetry"
                        },
                        new
                        {
                            Id = new Guid("b5b2a224-b6b4-4abe-869d-eb98128ef2d3"),
                            Name = "Graphic Novels"
                        },
                        new
                        {
                            Id = new Guid("efe99c6c-da21-4400-b652-1819129e30e6"),
                            Name = "Adventure"
                        });
                });

            modelBuilder.Entity("Library.Entities.Review", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Assessment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("BookId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("UserId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("Library.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("BookCategory", b =>
                {
                    b.HasOne("Library.Entities.Book", null)
                        .WithMany()
                        .HasForeignKey("BooksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Library.Entities.Category", null)
                        .WithMany()
                        .HasForeignKey("CategoriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Library.Entities.Review", b =>
                {
                    b.HasOne("Library.Entities.Book", "Book")
                        .WithMany("Reviews")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Library.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Library.Entities.Book", b =>
                {
                    b.Navigation("Reviews");
                });
#pragma warning restore 612, 618
        }
    }
}
